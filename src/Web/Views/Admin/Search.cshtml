@model Web.Models.SearchViewModel

@{
    ViewBag.Title = "Search";
}

@section scripts{
    <!-- References to KnockoutJS and Mapping -->
    <script src="~/Scripts/knockout-2.2.0.js"></script>
    <script src="~/Scripts/knockout.mapping-latest.js"></script>

    <script type="text/javascript">
        function SearchViewModel() {
            // To control local scope
            var self = this;

            // Array of results
            this.results = ko.observableArray();

            this.search = function () {
                // Get the first form on the page, which is the search form.
                var form = $('form')[0];

                // Post to the form's action, just serializing the form values.
                $.post(form.action, $(form).serialize(), function (response) {
                    var mapping = {
                        'create': function (item) {
                            var person = new PersonViewModel();

                            ko.mapping.fromJS(item.data, {}, person);

                            return person;
                        }
                    };
                    var data = response.Results;
                    var target = self.results;

                    ko.mapping.fromJS(data, mapping, target);
                });
            };

            this.currentItem = ko.computed(function () {
                // Get first result that isEditing()
                return ko.utils.arrayFirst(self.results(), function (item) {
                    return item.isEditing();
                });
            });

            this.showList = ko.computed(function () {
                return !self.currentItem();
            });

            this.showEditor = ko.computed(function () {
                return !!self.currentItem();
            });

            this.back = function () {
                self.currentItem().isEditing(false);
            };
        }

        function PersonViewModel() {
            this.isEditing = ko.observable(false);

            var self = this;
            this.edit = function () {
                self.isEditing(true);
            };

            this.save = function () {
                self.isEditing(false);

                // Omitted for brevity
            };

            this.remove = function () {
                // Omitted for brevity
            };
        }

        // To be able to test model in a global scope.
        var model = {};

        $(function () {

            // Create new model
            model = new SearchViewModel();

            // Apply bindings
            ko.applyBindings(model);
        });
    </script>
}

<div data-bind="visible: showList">
    @Html.Partial("_Search")

    @Html.Partial("_Results")
</div>
<div data-bind="visible: showEditor">
    @Html.Partial("_Edit")
</div>